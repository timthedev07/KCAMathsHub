generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  // next auth
  email               String?      @unique
  image               String?
  accounts            Account[]
  sessions            Session[]
  // custom
  usernameLastUpdated DateTime?
  id                  String       @id @default(cuid())
  username            String?      @unique @default(uuid())
  blocked             Boolean      @default(false)
  answererReputation  Int          @default(100)
  inquirerReputation  Int          @default(100)
  joinedDate          DateTime     @default(now())
  joinedYear          Int?         @db.SmallInt // the year group of the user when joined; only applies to students
  roles               Role[]
  questions           Question[]
  answers             Answer[]     @relation("WrittenAnswers")
  moderations         Moderation[] @relation("Moderation")
  referralCreated     Referral?    @relation("ReferralCreator")
  referralAccepted    Referral?    @relation("ReferralAccepted", fields: [acceptedReferralId], references: [id])
  acceptedReferralId  String?
}

model Role {
  name   String  @id @unique
  users  User[]
  userId String?
}

model ImageAttachment {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(128)
  imgUrl     String
  // question relation
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String?
  // otherwise, answer relation
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId   String?
}

model Question {
  id             String             @id @default(cuid())
  title          String             @db.VarChar(128)
  content        String             @db.VarChar(5000)
  timestamp      DateTime           @default(now())
  // attachment relation
  attachments    ImageAttachment[]
  category       String
  // question relation
  questioner     User?              @relation(fields: [questionerId], references: [id], onDelete: SetNull)
  questionerId   String?
  // answer relation
  answer         Answer?
  // categories relation
  categories     QuestionCategory[] @relation("QuestionCategory")
  // yearGroup
  yearGroupAsked Int
}

model QuestionCategory {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(48)
  questions Question[] @relation("QuestionCategory")
}

model Answer {
  id          String            @id @default(cuid())
  content     String            @db.VarChar(5000)
  helpful     Boolean?
  timestamp   DateTime          @default(now())
  // attachments relation
  attachments ImageAttachment[]
  moderated   Boolean           @default(false)
  // answerer relation
  answerer    User?             @relation("WrittenAnswers", fields: [answererId], references: [id], onDelete: SetNull)
  answererId  String?
  // question relation
  question    Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String            @unique
  // moderations relation
  moderations Moderation[]      @relation("AnswerModerations")
}

model Moderation {
  id                String   @id @default(cuid())
  moderationComment String?  @db.VarChar(5000)
  approval          Boolean  @default(false)
  timestamp         DateTime @default(now())
  // moderator relation
  moderator         User?    @relation("Moderation", fields: [moderatorId], references: [id], onDelete: SetNull)
  moderatorId       String?
  // answer relation
  answer            Answer   @relation("AnswerModerations", fields: [answerId], references: [id], onDelete: Cascade)
  answerId          String
}

model Referral {
  id            String @id @default(cuid())
  user          User   @relation("ReferralCreator", fields: [userId], references: [id], onDelete: Cascade)
  userId        String @unique
  acceptedUsers User[] @relation("ReferralAccepted")
}

// Next Auth Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
