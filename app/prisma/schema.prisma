generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // next auth
  email              String?   @unique
  image              String?
  accounts           Account[]
  sessions           Session[]
  // custom
  id                 String    @id @default(cuid())
  username           String?
  blocked            Boolean   @default(false)
  answererReputation Int       @default(0)
  joinedDate         DateTime  @default(now())
  joinedYear         Int?      @db.SmallInt // the year group of the user when joined; only applies to
  role               Role      @relation(fields: [roleId], references: [id])
  roleId             Int       @default(1) @db.SmallInt
}

model Role {
  id   Int    @id @default(autoincrement()) @db.SmallInt
  name String @unique @db.VarChar(16)
  User User[]
}

// Next Auth Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
